default: &defaults
  docker:
  - image: circleci/android:api-28-alpha
  working_directory: ~/repo
  environment:
  TERM: dumb
  # Customize the JVM maximum heap limit
  _JAVA_OPTIONS: "-Xmx2048m -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap"
  GRADLE_OPTS: '-Dorg.gradle.jvmargs="-Xmx2048m"'


# Google Services From Firebase (JSON)
export_gservices_key: &export_gservices_key
  run:
    name: Export Google Services key environment variable
    command: echo 'export GOOGLE_SERVICES_JSON="$GOOGLE_SERVICES_JSON"' >> $BASH_ENV

decode_gservices_key: &decode_gservices_key
  run:
    name: Decode Google Services JSON key
    command: |
      mkdir app/src/mock/
      mkdir app/src/prod/
      touch app/google-services.json
      touch app/src/mock/google-services.json
      touch app/src/prod/google-services.json
      echo $GOOGLE_SERVICES_JSON | base64 --decode >> app/google-services.json
      echo $GOOGLE_SERVICES_JSON | base64 --decode >> app/src/mock/google-services.json
      echo $GOOGLE_SERVICES_JSON | base64 --decode >> app/src/prod/google-services.json


# Google Cloud Service Account Key
export_gcloud_key: &export_gcloud_key
  run:
    name: Export Google Cloud Service Account Key Environment Variable
    command: echo 'export GCLOUD_SERVICE_KEY="$GCLOUD_SERVICE_KEY"' >> $BASH_ENV

decode_gcloud_key: &decode_gcloud_key
  run:
    name: Decode Google Cloud Credentials
    command: |
      touch gcloud-service-key.json
      echo $GCLOUD_SERVICE_KEY | base64 --decode >> gcloud-service-key.json


## Workspace
workspace: &workspace
  ~/repo
attach_debug_workspace: &attach_debug_workspace
  attach_workspace:
    at: *workspace
persist_debug_workspace: &persist_debug_workspace
  persist_to_workspace:
    root: *workspace
    paths:
      - app/build/intermediates
      - app/build/outputs/androidTest-results
      - app/build/outputs/apk
      - app/build/outputs/code-coverage
      - app/build/test-results
attach_firebase_workspace: &attach_firebase_workspace
  attach_workspace:
    at: *workspace
persist_firebase_workspace: &persist_firebase_workspace
  persist_to_workspace:
    root: *workspace
    paths:
      - firebase


version: 2
jobs:

  # Build debug APK for unit tests and an instrumented test APK
  build_debug:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "build.gradle" }}
          - v1-dependencies-
      - run: ./gradlew androidDependencies
      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}

      - *export_gservices_key
      - *decode_gservices_key

      # Running build
      - run:
          name: Gradle build
          command: |
            ./gradlew -PciBuild=true :app:assemble :app:assembleAndroidTest
            ls -a app/build/outputs/apk/

      - *persist_debug_workspace

      - store_artifacts:
          path: app/build/outputs/apk/
          destination: /apk/

  # Run unit tests
  test_unit:
    <<: *defaults
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "build.gradle" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      - run: ./gradlew androidDependencies
      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}

      - *export_gservices_key
      - *decode_gservices_key

      # Running unit tests
      - run:
          name: Running unit tests on source code
          command: |
            ./gradlew test
            ls -a app/build/outputs/logs

      - *persist_debug_workspace

      #Storing unit test reports
      - store_artifacts:
          path: app/build/reports/
          destination: /reports/
      - store_artifacts:
          path: app/build/outputs/androidTest-results/
          destination: /androidTest-results/

  # Run instrumented tests
  test_instrumentation:
    <<: *defaults
    steps:
      - checkout
      - *attach_debug_workspace
      - *export_gcloud_key
      - *decode_gcloud_key

      - run:
          name: Authorize gcloud and set config defaults
          command: |
            ls -a
            gcloud auth activate-service-account narobi-java-developers@developers-216907.iam.gserviceaccount.com --key-file=gcloud-service-key.json
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
      - run:
          name: Test with Firebase Test Lab
          command: gcloud firebase test android run --type instrumentation --app app/build/outputs/apk/prod/debug/app-prod-debug.apk --test app/build/outputs/apk/androidTest/prod/debug/app-prod-debug-androidTest.apk --results-bucket cloud-test-${GOOGLE_PROJECT_ID}
      - run:
          name: Create directory to store test results
          command: mkdir firebase
      - store_artifacts:
          path: firebase/
          destination: /firebase/
      - *persist_firebase_workspace

  # Generate and upload JaCoCo coverage report
  report_coverage:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "build.gradle" }}
          - v1-dependencies-
      - run: ./gradlew androidDependencies

      - *export_gservices_key
      - *decode_gservices_key
      - run:
          name: Code Climate Test Setup
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
      - run:
          name: Code Climate Pretest
          command: ./cc-test-reporter before-build
      - run:
          name: Generate JaCoCo report
          command: ./gradlew jacocoTestReport
      - run:
          name: Upload coverage to code climate
          command: |
            export JACOCO_SOURCE_PATH=app/src/main/java
            ./cc-test-reporter format-coverage app/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml -t jacoco
            ./cc-test-reporter upload-coverage
      - store_artifacts:
          path: app/build/reports/
          destination: /reports/

## Workflows
workflows:
  version: 2
  linting_tests_and_deployment:
    jobs:
      - build_debug
      - test_unit
      - test_instrumentation:
          requires:
            - build_debug
      - report_coverage:
          requires:
            - test_unit
            - test_instrumentation
