def coverageSourceDirs = [
        'src/main/java',
        'src/debug/java',
        'src/mock/java',
        'src/prod/java'
]

task jacocoTestReport(type: JacocoReport, dependsOn: ['clean', 'test']) {
    description = 'Generate JaCoCo coverage report'
    group = 'Reporting'

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = [
            '**/R.class',
            '**/R$*.class',
            '**/*$ViewInjector*.*',
            '**/*$ViewBinder*.*',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
            '**/*Fragment.*',
            '**/*Activity.*'
    ]

    def debugTree = fileTree(dir: "$buildDir/intermediates/classes/debug", excludes: fileFilter)
    def kotlinDebugTree = fileTree(dir: "$buildDir/tmp/kotlin-classes/prodDebug", excludes: fileFilter)

    classDirectories = files([debugTree], [kotlinDebugTree])
    sourceDirectories = files(coverageSourceDirs, "src/main/kotlin")
    executionData     = fileTree(
            dir     : "$buildDir",
            include : ['**/*.exec', '**/*.ec']
    )
}

task unifiedCoverageReport(dependsOn: ['clean', 'jacocoTestReport', 'createProdDebugCoverageReport']) {
    description = 'Generates coverage report which includes both local unit tests and instrumentation tests'
    group = 'Reporting'
}